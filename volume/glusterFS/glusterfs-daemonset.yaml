apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: job-access-role
  namespace: default
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: job-access-rolebinding
  namespace: default
subjects:
  - kind: ServiceAccount
    name: default 
    namespace: default
roleRef:
  kind: Role
  name: job-access-role 
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-credentials
type: Opaque
data:
  docker-username: ZG9ja2VyZWx2aXM=
  docker-password: U2ltb24xOTc4OTAjwqkj4oKsI+KCrCM=

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: dockerfile-config
data:
  Dockerfile: |
    # Dockerfile contents go here
    # Use an Ubuntu base image
    FROM ubuntu:20.04

    # Set non-interactive mode for apt-get to avoid any prompts
    ENV DEBIAN_FRONTEND=noninteractive

    # Install prerequisites including ping (iputils-ping)
    RUN apt-get update && \
        apt-get install -y software-properties-common curl iputils-ping && \
        apt-get clean

    # Add the GlusterFS PPA repository
    RUN add-apt-repository ppa:gluster/glusterfs-10

    # Update apt repositories
    RUN apt-get update

    # Install GlusterFS server
    RUN apt-get install -y glusterfs-server

    # Create the gluster user
    RUN useradd -r -u 1001 glusteruser

    # Set up and set permissions for the /mnt/glusterfs directory
    RUN mkdir -p /mnt/glusterfs && \
        chown -R glusteruser:glusteruser /mnt/glusterfs && \
        chmod -R 755 /mnt/glusterfs

    # Expose ports for GlusterFS if required
    EXPOSE 24007 24008 24009 24010

    # Set up GlusterFS as the default command (no need to use systemctl in Docker)
    CMD ["glusterd", "-N"]

---
apiVersion: batch/v1
kind: Job
metadata:
  name: docker-build-job
spec:
  template:
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "kubernetes.io/hostname"
                operator: In
                values:
                - minikube
      containers:
      - name: docker-build-container
        image: docker:19.03.12
        command:
        - /bin/sh
        - -c
        - |
          echo "Logging into Docker..."
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

          echo "Checking Docker installation..."
          docker info

          echo "Building the image..."
          mkdir -p /docker-build
          cp /config/Dockerfile /docker-build/Dockerfile
          cd /docker-build
          docker build -t $DOCKER_USERNAME/glusterfs-image:latest .

          echo "Pushing the image to Docker Hub..."
          docker push $DOCKER_USERNAME/glusterfs-image:latest

          echo "Done"
        env:
        - name: DOCKER_USERNAME
          valueFrom:
            secretKeyRef:
              name: docker-credentials
              key: docker-username
        - name: DOCKER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: docker-credentials
              key: docker-password
        volumeMounts:
        - name: dockerfile-volume
          mountPath: /config
        - name: docker-socket
          mountPath: /var/run/docker.sock
      volumes:
      - name: dockerfile-volume
        configMap:
          name: dockerfile-config
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
      restartPolicy: Never
  backoffLimit: 2

---
apiVersion: v1
kind: Service
metadata:
  name: glusterfs-service
spec:
  selector:
    app: glusterfs
  ports:
    - protocol: TCP
      port: 24007
      targetPort: 24007
  type: NodePort

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: glusterfs
spec:
  selector:
    matchLabels:
      app: glusterfs
  template:
    metadata:
      labels:
        app: glusterfs
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/hostname
                    operator: NotIn
                    values:
                      - minikube  # Ensure this does not schedule on a single node
      initContainers:
      - name: wait-for-job
        image: bitnami/kubectl:latest
        command:
          - "/bin/sh"
          - "-c"
          - |
            # Wait until the job is successful
            until kubectl get jobs/docker-build-job -o=jsonpath='{.status.succeeded}' | grep -q '1'; do
              echo "Waiting for job to succeed..."
              sleep 5
            done
            echo "Job is successful, proceeding with the pod task."
      - name: create-glusterfs-brick
        image: gluster/gluster-centos:latest
        env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
        command:
          - "/bin/bash"
          - "-c"
          - |
            echo "Starting glusterd daemon..."
            glusterd --no-daemon &

            # Wait for glusterd to start
            for i in {1..10}; do
              if pgrep -x "glusterd" > /dev/null; then
                echo "glusterd daemon started successfully."
                break
              fi
              echo "Waiting for glusterd daemon to start... ($i/10)"
              sleep 1
            done

            # Check if glusterd started successfully
            if ! pgrep -x "glusterd" > /dev/null; then
              echo "Failed to start glusterd daemon. Exiting."
              exit 1
            fi

            # Define the brick directory dynamically using NODE_NAME
            BRICK_DIR="/mnt/glusterfs/brick-${NODE_NAME}"
            mkdir -p $BRICK_DIR
            echo "Creating GlusterFS brick at $BRICK_DIR"

            # Print the NODE_NAME
            echo "This pod is running on node: $NODE_NAME"

        volumeMounts:
          - name: glusterfs-data
            mountPath: /mnt/glusterfs
      containers:
      - name: glusterfs
        image: dockerelvis/glusterfs-image:latest
        ports:
        - containerPort: 24007
        - containerPort: 24008
        volumeMounts:
        - name: glusterfs-data
          mountPath: /mnt/glusterfs
        livenessProbe:
          tcpSocket:
            port: 24007
          initialDelaySeconds: 60 
          periodSeconds: 10
          failureThreshold: 3 
        readinessProbe:
          tcpSocket:
            port: 24007
          initialDelaySeconds: 30 
          periodSeconds: 5
          failureThreshold: 3
      volumes:
      - name: glusterfs-data
        hostPath:
          path: /glusterfs-mount  
          type: DirectoryOrCreate 
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
          type: Socket
